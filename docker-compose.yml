# Reusable vars
x-var:
  - &POSTGRES_USER
    postgres

# Postgres envars
x-postgres-vars: &postgres-vars
  POSTGRES_DATABASE: postgres
  POSTGRES_HOST: nr-nmp-db
  POSTGRES_PASSWORD: default
  POSTGRES_USER: *POSTGRES_USER

name: nr-nmp
services:
  # DB
  database:
    build:
      context: ./database
      dockerfile: Dockerfile
    image: postgres:17
    container_name: nr-nmp-db
    environment:
      <<: *postgres-vars
    ports: [5432:5432]
    healthcheck:
      test: ["CMD", "pg_isready", "-U", *POSTGRES_USER]

  # PGAdmin
  pgadmin:
    container_name: nr-nmp-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@qs.com
      PGADMIN_DEFAULT_PASSWORD: admin
    image: dpage/pgadmin4
    ports: [5050:80]
    profiles: ["pgadmin"]

  # Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: nr-nmp-api
    depends_on:
      database:
        condition: service_healthy
    develop:
     watch:
       - action: sync
         path: ./backend/
         target: app
    env_file: .env
    environment:
      LOG_LEVEL: info
      PORT: 3000
      SSO_REDIRECT_URL: http://localhost:3000/auth/callback
      <<: *postgres-vars
    healthcheck:
     test: curl --fail http://localhost:3000 || exit 1
    ports: ["3000:3000"]
    # For debugging
    stdin_open: true
    tty: true

  # Frontend
  frontend:
    image: node:20.17.0
    command: /bin/bash -c "cd ./app && npm install && npm run ${CMD:-dev}"
    container_name: nr-nmp-frontend
    depends_on:
      backend:
        condition: service_healthy
    develop:
      watch:
        - action: sync
          path: ./frontend
          target: /app
          ignore: [node_modules]
    environment:
      VITE_BACKEND_URL: http://localhost:3000
    healthcheck:
      test: curl --fail http://localhost:5173 || exit 1
    ports: ["5173:5173"]
    volumes: ["./frontend:/app", "/app/node_modules"]

  caddy:
    container_name: caddy
    profiles: ["caddy"]
    build: ./frontend
    environment:
      NODE_ENV: development
      PORT: 3000
      BACKEND_URL: http://backend:3000
      LOG_LEVEL: info
    ports: ["3005:3000"]
    volumes: ["./frontend/Caddyfile:/etc/caddy/Caddyfile"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005"]
    depends_on:
      backend:
        condition: service_healthy
