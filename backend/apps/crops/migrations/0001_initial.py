# Generated by Django 5.1.7 on 2025-03-20 18:43

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ConversionFactors',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('nitrogenproteinconversion', models.FloatField()),
                ('unitconversion', models.FloatField()),
                ('defaultsoiltestkelownaphosphorous', models.FloatField()),
                ('defaultsoiltestkelownapotassium', models.FloatField()),
                ('kilogramperhectaretopoundperacreconversion', models.FloatField()),
                ('potassiumavailabilityfirstyear', models.FloatField()),
                ('potassiumavailabilitylongterm', models.FloatField()),
                ('potassiumktok2oconversion', models.FloatField()),
                ('phosphorousavailabilityfirstyear', models.FloatField()),
                ('phosphorousavailabilitylongterm', models.FloatField()),
                ('phosphorousptop2o5conversion', models.FloatField()),
                ('poundpertonconversion', models.FloatField()),
                ('poundper1000ftsquaredtopoundperacreconversion', models.FloatField()),
                ('defaultapplicationofmanureinprevyears', models.FloatField()),
                ('soiltestppmtopoundperacreconversion', models.FloatField()),
            ],
            options={
                'db_table': 'conversion_factors',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Crops',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('cropname', models.CharField(max_length=100)),
                ('croptypeid', models.IntegerField()),
                ('yieldcd', models.FloatField()),
                ('cropremovalfactornitrogen', models.FloatField()),
                ('cropremovalfactorp2o5', models.FloatField()),
                ('cropremovalfactork2o', models.FloatField()),
                ('nitrogenrecommendationid', models.IntegerField()),
                ('nitrogenrecommendationpoundperacre', models.FloatField(blank=True, null=True)),
                ('nitrogenrecommendationupperlimitpoundperacre', models.FloatField(blank=True, null=True)),
                ('previouscropcode', models.IntegerField()),
                ('sortnumber', models.IntegerField()),
                ('manureapplicationhistory', models.IntegerField()),
                ('harvestbushelsperton', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'crops',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CropSoilPotassiumRegions',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('cropid', models.IntegerField()),
                ('soiltestpotassiumregioncode', models.IntegerField()),
                ('potassiumcropgroupregioncode', models.IntegerField()),
            ],
            options={
                'db_table': 'crop_soil_potassium_regions',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CropSoilTestPhosphorousRegions',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('cropid', models.IntegerField()),
                ('soiltestphosphorousregioncode', models.IntegerField()),
                ('phosphorouscropgroupregioncode', models.IntegerField()),
            ],
            options={
                'db_table': 'crop_soil_test_phosphorous_regions',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CropTypes',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('covercrop', models.BooleanField()),
                ('crudeproteinrequired', models.BooleanField()),
                ('customcrop', models.BooleanField()),
                ('modifynitrogen', models.BooleanField()),
            ],
            options={
                'db_table': 'crop_types',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CropYields',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('cropid', models.IntegerField()),
                ('locationid', models.IntegerField()),
                ('amount', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'crop_yields',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='NitrogenRecommendation',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('recommendationdesc', models.TextField()),
            ],
            options={
                'db_table': 'nitrogen_recommendations',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PreviousCropTypes',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('previouscropcode', models.IntegerField()),
                ('name', models.CharField(max_length=100)),
                ('nitrogencreditmetric', models.IntegerField()),
                ('nitrogencreditimperial', models.IntegerField()),
                ('cropid', models.IntegerField()),
                ('croptypeid', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'previous_crop_types',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SoilTestMethods',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('converttokelownaphlessthan72', models.FloatField()),
                ('converttokelownaphgreaterthan72', models.FloatField()),
                ('converttokelownak', models.FloatField()),
                ('sortnum', models.IntegerField()),
            ],
            options={
                'db_table': 'soil_test_methods',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SoilTestPhosphorousKelownaRanges',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('rangelow', models.IntegerField()),
                ('rangehigh', models.IntegerField()),
            ],
            options={
                'db_table': 'soil_test_phosphorous_kelowna_ranges',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SoilTestPhosphorousRecommendation',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('soiltestphosphorouskelownarangeid', models.IntegerField()),
                ('soiltestphosphorousregioncode', models.FloatField()),
                ('phosphorouscropgroupregioncode', models.FloatField()),
                ('p2o5recommendationkilogramperhectare', models.FloatField()),
            ],
            options={
                'db_table': 'soil_test_phosphorous_recommendation',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SoilTestPotassiumKelownaRanges',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('rangelow', models.IntegerField()),
                ('rangehigh', models.IntegerField()),
            ],
            options={
                'db_table': 'soil_test_potassium_kelowna_ranges',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SoilTestPotassiumRecommendation',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('soiltestpotassiumkelownarangeid', models.IntegerField()),
                ('soiltestpotassiumregioncode', models.FloatField()),
                ('potassiumcropgroupregioncode', models.FloatField()),
                ('k2orecommendationkilogramperhectare', models.FloatField()),
            ],
            options={
                'db_table': 'soil_test_potassium_recommendation',
                'managed': True,
            },
        ),
    ]
